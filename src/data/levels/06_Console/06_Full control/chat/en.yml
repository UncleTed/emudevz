---
main:
  run: |
    set((m) => m.chat.winOnEnd = true);
  messages:
  - ok, it's time
  - I think you're ready to know
  responses:
  - what? [what]

what:
  messages:
  - I'm actually...
  - the creator of BrokenNEEES
  - it has been rough since <AI> took over and most manual programming efforts have died
  - I miss <manual programming>, a lot
  - I wanted to make someone out there enjoy programming like I do
  - then I found you, and your interest in emulation made me want to help
  - the emulator isn't actually <broken>, those were bugs I planted on purpose üòÖ
  - the goal was to have an excuse to teach someone something I love
  - that is why I always have some code ready to nudge you forward
  - I hope you are not mad
  responses:
  - why fake bugs? [why]
  - so, what now? [integrate]

why:
  messages:
  - you don't learn the soul of an emulator by reading, you learn it by doing!
  - and being able to actually play the games without bugs is a great motivator üëæ
  responses:
  - (*) so your "real NEEES" was also your emulator? [real]
  - fine, what is next? [integrate]

real:
  messages:
  - üòÖ ü§£ ‚ò†Ô∏è
  responses:
  - ...why

integrate:
  run: |
    {{Top}}.load(null, "rom");
  messages:
  - I'm gonna give you full control over the üïπÔ∏è  Emulator
  - let's see...
  run-after-messages: |
    level.startEffect("earthquake");
    setTimeout(() => {
      bus.emit("patching-end");
    }, 500);
  events: 
  - patching-end [done]

done:
  run: |
    level.stopEffect();
    book.unlock("useConsole");
  messages:
  - ‚úÖ  done!
  - <! üïπÔ∏è  NEEES integrated.
  - now, the üïπÔ∏è  icon in the emulator will glow ‚ú®
  - if you enable it, the frontend will look up an `Emulator` class in üìÑ  ~/code/index.js~
  - and there will be no trace of BrokenNEEES
  responses:
  - but I don't have that class! [exercise]

exercise:
  messages:
  - yeah, let's hand over the missing code to you
  - you'll have full control of, at least, the üåÄ  emulator core
  - |-
    üìö  create code files from these templates:
      üìÑ  ~/tmpl/Emulator.js~
      üìÑ  ~/tmpl/saveStates.js~
      üìÑ  ~/tmpl/mappers/mappers.js~
      üìÑ  ~/tmpl/mappers/0_NROM.js~
  - üìö  import `Emulator.js` and export the object under the `Emulator` key in üìÑ  ~/code/index.js~
  - notice that, when doing this, only <NROM> (mapper 0) games will work
  - you will fix that in the üóúÔ∏è  Mappers chapter
  responses:
  - ‚ñ∂Ô∏è  continue [end]
