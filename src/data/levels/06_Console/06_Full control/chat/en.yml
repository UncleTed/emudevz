---
main:
  run: |
    set((m) => m.chat.winOnEnd = true);
  messages:
  - ok
  - "{5}it's time"
  - "{10}I think you're ready to know"
  responses:
  - what? [what]

what:
  messages:
  - I'm actually...
  - "{30}the creator of BrokenNEEES"
  - "{30}it has been rough since <AI> took over and most manual programming efforts have died"
  - "{5}I miss <manual programming>, a lot"
  - "{5}I wanted to make someone out there enjoy programming like I do"
  - "{5}then I found you, and your interest in emulation made me want to help"
  - "{10}the emulator isn't actually <broken>, those were bugs I planted on purpose 😅"
  - "{5}the goal was to have an excuse to teach someone something I love"
  - "{5}that is why I always have some code ready to nudge you forward"
  - "{5}I hope you are not mad"
  responses:
  - why fake bugs? [why]
  - so, what now? [integrate]

why:
  messages:
  - you don't learn the soul of an emulator by reading, you learn it by doing!
  - and being able to actually play the games without bugs is a great motivator 👾
  responses:
  - (*) so your "real NEEES" was also your emulator? [real]
  - fine, what is next? [integrate]

real:
  messages:
  - 😅 🤣 ☠️
  responses:
  - ...why

integrate:
  run: |
    {{Top}}.load(null, "rom");
  messages:
  - I'm gonna give you full control over the 🕹️  Emulator
  - let's see...
  run-after-messages: |
    level.startEffect("earthquake");
    setTimeout(() => {
      bus.emit("patching-end");
    }, 500);
  events: 
  - patching-end [done]

done:
  run: |
    level.stopEffect();
    book.unlock("useConsole");
  messages:
  - ✅  done!
  - <! 🕹️  NEEES integrated.
  - now, the 🕹️  icon in the emulator will glow ✨
  - if you enable it, the frontend will look up an `Emulator` class in 📄  ~/code/index.js~
  - and there will be no trace of BrokenNEEES
  responses:
  - but I don't have that class! [exercise]

exercise:
  messages:
  - yeah, let's hand over the missing code to you
  - you'll have full control of, at least, the 🌀  emulator core
  - |-
    📚  create code files from these templates:
      📄  ~/tmpl/Emulator.js~
      📄  ~/tmpl/saveStates.js~
      📄  ~/tmpl/mappers/mappers.js~
      📄  ~/tmpl/mappers/0_NROM.js~
  - 📚  import `Emulator.js` and export the object under the `Emulator` key in 📄  ~/code/index.js~
  - notice that, when doing this, only <NROM> (mapper 0) games will work
  - you will fix that in the 🗜️  Mappers chapter
  responses:
  - (*) what about the tests? 🧪 [tests]
  - ▶️  continue [end]

tests:
  messages:
  - you want the unit tests? 🤔
  - yeah, if you improve the emulator later, I guess they can be useful to ensure everything works
  - |-
    and of course you'll have to eventually update them, so here they are:
      📄  ~/tmpl/tests/apu.test.js~
      📄  ~/tmpl/tests/bus.test.js~
      📄  ~/tmpl/tests/cartridge.test.js~
      📄  ~/tmpl/tests/cpu.test.js~
      📄  ~/tmpl/tests/cpu_addressing_modes_1.test.js~
      📄  ~/tmpl/tests/cpu_addressing_modes_2.test.js~
      📄  ~/tmpl/tests/cpu_instructions_1.test.js~
      📄  ~/tmpl/tests/cpu_instructions_2.test.js~
      📄  ~/tmpl/tests/cpu_instructions_3.test.js~
      📄  ~/tmpl/tests/cpu_instructions_4.test.js~
      📄  ~/tmpl/tests/cpu_instructions_5.test.js~
      📄  ~/tmpl/tests/ppu.test.js~
  responses:
  - ...exercise
