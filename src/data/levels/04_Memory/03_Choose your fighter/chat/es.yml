---
main:
  messages:
  - tienes que empezar por algún lado 😅
  - <{architecture_unified.png;100x100}>
  - como dije anteriormente, puedes empezar a programar las cosas en cualquier orden
  - y yo parchearé BrokenNEEES para que utilice partes de tu emulador...
  run-after-messages: |
    $.goTo("components");
  responses: []

components:
  messages:
  - "🧠  CPU: Elige esto si quieres emular conceptos que has aprendido en el capítulo de Ensamblador."
  - "🖥️  PPU: Elige esto si quieres ir directamente a la acción y mostrar gráficos en la pantalla."
  - "🔊  APU: Elige esto si tienes curiosidad por aprender cómo reproducir el sonido en los juegos."
  - "🎮  Mando: Elige esto si prefieres empezar mapeando los inputs del usuario en la memoria, para que los juegos puedan leerlos. El soporte de BrokenNEEES para mandos funciona bien, por lo que __este capítulo es opcional__."
  - "🗜️  Mappers: Elige esto si tienes la obsesión de soportar tantos juegos como sea posible. BrokenNEEES soporta los mappers más comunes (0-4), así que __este capítulo es opcional__."
  responses:
  - 🧠  Me gustaría empezar con la CPU [cpu]
  - 🖥️  Me gustaría empezar con el PPU [ppu]
  - 🔊  Me gustaría empezar con el APU [apu]
  - 🎮  Me gustaría empezar con el Mando [controller]
  - 🗜️  Me gustaría empezar con los Mappers [mappers]

cpu:
  run: |
    const book = store.getState().book.instance;
    const chapter = book.getChapter(4);
    const firstLevelId = chapter.levels[0].id;
    store.dispatch.savedata.unlockChapter(firstLevelId);
    store.dispatch.savedata.advanceTo(firstLevelId);
  messages: []
  responses: []

ppu:
  run: |
    const book = store.getState().book.instance;
    const chapter = book.getChapter(5);
    const firstLevelId = chapter.levels[0].id;
    store.dispatch.savedata.unlockChapter(firstLevelId);
    store.dispatch.savedata.advanceTo(firstLevelId);
  messages: []
  responses: []

apu:
  run: |
    const book = store.getState().book.instance;
    const chapter = book.getChapter(6);
    const firstLevelId = chapter.levels[0].id;
    store.dispatch.savedata.unlockChapter(firstLevelId);
    store.dispatch.savedata.advanceTo(firstLevelId);
  messages: []
  responses: []

controller:
  run: |
    const book = store.getState().book.instance;
    const chapter = book.getChapter(7);
    const firstLevelId = chapter.levels[0].id;
    store.dispatch.savedata.unlockChapter(firstLevelId);
    store.dispatch.savedata.advanceTo(firstLevelId);
  messages: []
  responses: []

mappers:
  run: |
    const book = store.getState().book.instance;
    const chapter = book.getChapter(8);
    const firstLevelId = chapter.levels[0].id;
    store.dispatch.savedata.unlockChapter(firstLevelId);
    store.dispatch.savedata.advanceTo(firstLevelId);
  messages: []
  responses: []
