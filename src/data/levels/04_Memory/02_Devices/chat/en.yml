---
main:
  messages:
  - remember, every hardware component has to be connected to the memory
  - as you make progress in your development, you will have to update your `CPUMemory` class, adding the correct mappings
  - one important device we need to add is the 🗜️  Mapper, which will handle all the interactions with game code (🤖  PRG-ROM)
  - the 🧠  CPU accesses the code just by reading bytes inside $4020-$FFFF
  - let's make our memory receive a bunch of <devices> 📱
  - |-
    📚  add the following method to your `CPUMemory`:
    **onLoad(ppu, apu, mapper, controllers)**:
      **->** saves the parameters as properties (```javascript this.ppu```, ```javascript this.apu```, ```javascript this.mapper```, and ```javascript this.controllers```)
  - 📚  then, as you did before with ```javascript this.ram```, modify `read(...)` and `write(...)` to let ```javascript this.mapper``` handle the range $4020-$FFFF (💾  Cartridge space)
  - on <reads>, you should return ```javascript this.mapper.cpuRead(address)```
  - on <writes>, you should call ```javascript this.mapper.cpuWrite(address, value)``` and return
  responses:
  - (*) who calls the `onLoad(...)` method? 🤔 [who]
  - (*) what's a mapper? 🗜️ [mapper]

who:
  messages:
  - when a game is loaded, BrokenNEEES will call this method automatically ✨
  - so that the memory has access to the rest of the hardware
  responses:
  - ...main

mapper:
  messages:
  - mappers are circuits inside the cartridge that control how the ROM data is read by the console
  - each game uses a specific mapper
  - the more mappers your emulator supports, the more games are compatible 👾
  - BrokenNEEES supports the most common mappers (~0-4~)
  - surprisingly, they all work! 🤯  so you'll be using those for now
  - and you'll learn how to add more in the 🗜️  Mappers chapter
  responses:
  - ...main
