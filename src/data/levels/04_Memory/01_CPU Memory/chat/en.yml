---
main:
  messages:
  - let's quickly recap the NEEES memory scheme
  - the CPU has 2 KiB of RAM 🐏
  - but memory addresses range from $0000 to $FFFF (65535)
  - so the full addressable space would be 64 KiB
  responses:
  - if only 2 KiB are actual RAM, what's in the other 62 KiB? 🤨 [other62]

other62:
  messages:
  - other things, like RAM mirrors, memory-mapped I/O, and the cartridge data
  - 🔗  everything is connected to the memory!
  - that's how the machine code interacts with the devices
  - the memory map has a very specific structure, see 📄  ~/docs/cpu/cpu_memory.en.md~
  run-after-messages: |
    store.dispatch.savedata.openFile("/docs/cpu/cpu_memory.en.md");
  responses:
  - (*) what's "memory-mapped I/O"? 🗺️ [io]
  - 👌  I see... what do I need to implement? [implement]

io:
  messages:
  - a scheme in which memory addresses are connected to physical devices
  - for example...
  - reading $4016 will read the 🎮  controller's pressed buttons
  - writing the 🖥️  PPU registers at $2000-$2007 will modify the screen
  - writing the 🔊  APU registers at $4000-$4013 will produce sounds
  - reading $8000 will probably read the first byte of <PRG-ROM> from the 💾  cartridge
  responses:
  - ...other62

implement:
  messages:
  - for now, we'll just implement the first two ranges of the memory map
  - 📚  create a `CPUMemory` class in 📄  ~/code/CPUMemory.js~ with a constructor
  - it should assign a `ram` property (a `Uint8Array` of 2048 bytes)
  - |-
    implement these two methods:
    **read(address)**:
      __-> if <address> is in $0000-$07FF, returns the corresponding byte from <ram>
      -> if <address> is in $0800-$1FFF, returns a mirrored byte from <ram>
        (e.g. $0802 becomes $0002, $1023 becomes $0023)
      -> otherwise, returns 0__
    **write(address, value)**:
      __-> similar to *read*, but writes the <value> instead of returning__
  - then, as you did with `Cartridge`, add the class to ~/code/index.js~
  responses:
  - I need help with the mirrored bytes 📐 [help]

help:
  messages:
  - calling `read(0x0802)` should return the same as `read(0x0002)`
  - and calling `write(0x0802, value)` should have the same effect as calling `write(0x0002, value)`
  - that's why the range $0800-$1FFF is called 🚽  <a mirror> of $0000-$07FF
  - to know which address you should read
  - you can use `byte.getMirroredAddress(...)`
  responses:
  - give me an example, please [example]

example:
  messages:
  - check the "Mirror hint" at the end of the document
  - let's use the 4th range ("🚽  Mirrors of $2000-$2007") as an example
  - we have a <mirror range> ($2008-$3FFF) pointing to a <target range> ($2000-$2007)
  - |-
    `byte.getMirroredAddress(...)` takes 5 arguments
      address => the read(...) and write(...) parameter
      mirrorRangeStart => ~0x2008~
      mirrorRangeEnd   => ~0x3fff~
      targetRangeStart => ~0x2000~
      targetRangeEnd   => ~0x2007~
  - |-
    then, we would do:
      ```javascript address = byte.getMirroredAddress(address, 0x2008, 0x3fff, 0x2000, 0x2007)```
  - and finally, we proceed as if `address` was in the target range ($2000-$2007) 😃
  responses: []
