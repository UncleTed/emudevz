---
main:
  messages:
  - "ğŸ“š  _-_vas a empezar creando dos clases: `Register8Bit` y `Register16Bit` _--_ğŸ”¢"
  - |-
    ğŸ“š  _-_tendrÃ­an que tener dos mÃ©todos:_--_
    *_-_*getValue()**:_--_
      *_-_*->** retorna el contenido del registro_--_
    *_-_*setValue(value)**:_--_
      *_-_*->** asigna el contenido del registro_--_
  - ğŸ“š  _-_el contenido del registro comienza en 0 y puede ser un nÃºmero de 8 bits (~0-255~) o uno de 16 bits (~0-65535~), dependiendo de la clase_--_
  responses:
  - (*) Â¿y si trato de escribir fuera de los lÃ­mites? ğŸš« [limit]
  - (*) Â¿cuÃ¡l es la mejor manera de implementar esto? ğŸ¤” [implement]
  - âœ…  ya creÃ© las clases, Â¿ahora quÃ©? [nowwhat]

limit:
  messages:
  - da la vuelta ğŸ”„ , y el valor resultante siempre termina quedando dentro del rango vÃ¡lido
  - |-
    aquÃ­, algunos ejemplos:
    ```raw ___________________________
    |  Type  | Write | Result |
    |--------|-------|--------|
    | 8-bit  | 258   | 2      |
    | 8-bit  | 518   | 6      |
    | 8-bit  | -2    | 254    |
    | 8-bit  | -128  | 128    |
    | 8-bit  | -200  | 56     |
    | 16-bit | 65536 | 0      |
     â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾```
  responses:
  - ...main

implement:
  messages:
  - yo crearÃ­a arrays tipados que contengan solo un elemento, como ```javascript new Uint8Array(1)``` y ```javascript new Uint16Array(1)```
  - luego, cuando hagas algo como ```javascript array[0] = 258;```, el valor se ajustarÃ¡ automÃ¡ticamente âœ¨
  responses:
  - ...main

nowwhat:
  messages:
  - |-
    ğŸ“š  _-_luego, agrega lo siguiente al constructor de tu clase `CPU`:
      ```javascript
      this.a = new Register8Bit();
      this.x = new Register8Bit();
      this.y = new Register8Bit();
      this.sp = new Register8Bit();
      this.pc = new Register16Bit();```_--_
  responses: []
