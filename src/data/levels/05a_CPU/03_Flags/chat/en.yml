---
main:
  messages:
  - as you saw in the Assembly chapter, there's also a 🏁  <Flags> register that represents the processor status
  - |-
    it's an 8-bit register, in which each bit has a special meaning:
     ```raw _______________________________```
    ```raw | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |```
    ```raw |---|---|---|---|---|---|---|---|```
    ```raw |``` ~N~ ```raw |``` ~V~ ```raw |``` ```raw 1``` ```raw |``` ```raw b``` ```raw |``` ~D~ ```raw |``` ~I~ ```raw |``` ~Z~ ```raw |``` ~C~ ```raw |```
     ```raw ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾```
  - we already covered C ("Carry") and Z ("Zero") in the past, and we'll talk about the others when we start coding CPU instructions
  - all flags are represented by an uppercase letter
  responses:
  - not <all> of them 😑 [notall]
  - <<level.isCompleted || m.$exercise>> 📚  take me to the action [what]

notall:
  messages:
  - right, right, with some exceptions
  - bit 5 is always 1
  - bit 4 ("b")... depends... on... things - we'll ignore it for now 😂
  responses:
  - fair enough, what should I do? [what]

what:
  run: |
    set((m) => m.$exercise = true);
  messages:
  - 📚  _-_create a `FlagsRegister` class with 6 boolean properties (called ~c~, ~z~, ~i~, ~d~, ~v~ and ~n~)_--_
  - _-_initialize them with ~false~_--_
  - |-
    📚  _-_then implement, following the previous table:_--_
    *_-_*getValue()**:_--_
      *_-_*->** should return an 8-bit number with all the flags_--_
    *_-_*setValue(value)**:_--_
      *_-_*->** should assign all the flags from the received 8-bit number_--_
  - _-_i.e. with ~i~ and ~v~ on, ```javascript getValue()``` should return ```javascript 0b01100100```_--_
  - _-_and ```javascript setValue(0b00000010)``` should set all booleans to ~false~, except for ~z~_--_
  responses:
  - (*) I need a bit of help 📐 [bits]
  - ✅  I have the class [nowwhat]

bits:
  messages:
  - 📄  ~/lib/byte.js~ comes to the rescue 🙌
  - to build the value on ```javascript getValue()```, use `bitfield`
  - to get the flags on ```javascript setValue(value)```, use `getFlag`
  responses:
  - ...what

nowwhat:
  messages:
  - "📚  _-_great, just add a new instance to the `CPU` class, below the other registers, like this:\n  ```javascript this.flags = new FlagsRegister();```_--_"
  responses: []
