---
main:
  messages:
  - vamos a definir algunas utilidades para simplificar futuras tareas
  - |-
    📚  en tus clases 🔢  `Register8Bit` y 🔢  `Register16Bit`, implementa:
    **increment()**:
      **->** llama a `setValue(...)` con el resultado de ```javascript getValue()+1```
    **decrement()**:
      **->** llama a `setValue(...)` con el resultado de ```javascript getValue()-1```
  - |-
    📚  en tu 🏁  `FlagsRegister`, implementa:
    **updateZero(value)**:
      **->** asigna ```javascript z=true``` si `value` es 0, o ```javascript z=false``` en caso contrario
    **updateNegative(value)**:
      **->** asigna ```javascript n=true``` si el byte es negativo, o ```javascript n=false``` en caso contrario
      (aquí, "negativo" significa que su <bit 7> es 1)
      (puedes usar ```javascript byte.isNegative(value)``` del <helper de bytes>)
    **updateZeroAndNegative(value)**:
      **->** llama a `updateZero(...)` y `updateNegative(...)` con `value`
  responses:
  - ¿biblioteca de bytes? [library]

library:
  messages:
  - sí, solo es una ayuda para facilitar tareas de manipulación de bits
  - está en 📄  ~/lib/byte.js~, solo impórtala como otro módulo y úsala
  responses: []
