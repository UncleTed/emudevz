---
main:
  messages:
  - only two instructions left 🎉
  - "and one of them is pretty trivial: `NOP`"
  - "`NOP` means \"No Operation\", and it does nothing!"
  - game developers used this as a placeholder, or to introduce timing delays to synchronize their systems
  - so, last one is `BRK` which generates an <Interrupt Request>
  responses:
  - what's an interrupt? [interrupt]

interrupt:
  messages:
  - it's a signal that pauses the current program in order to handle a specific event
  - when such an event happens, the CPU saves its state ([PC] and flags register) in the stack
  - and jumps to a well-known memory address (called vector) associated with that event
  - after handling the event, the execution usually returns to where it was left off
  - "in the NEEES, there are 3 events:"
  - "🔁  <RESET>: Triggered when the system is turned on"
  - "📹  NMI: Triggered when the PPU finishes drawing a frame"
  - "✋  <IRQ>: Triggered by a `BRK` instruction, the APU, or external hardware like mappers"
  responses:
  - can you give me an example? 🤔 [example]

example:
  messages:
  - sure! imagine you're a game
  - you need to move your sprites when the PPU finishes rendering its current frame, to avoid doing it while it's drawing (causing glitches 💥 )
  - so, you put your sprite moving code in -for example- address $AA00
  - that will be the location of your <interrupt handler>
  - and then you "subscribe" to the NMI event by placing a pointer to $AA00 in NMI's vector (which is ~$FFFA/B~)
  - (in Little Endian, so $FFFA holds $00 and $FFFB holds $AA)
  - check out 📄  ~/docs/cpu/interrupt_example.md~
  responses:
  - what would happen when an NMI occurs? [nmi]

nmi:
  messages:
  - "in this example, when the NMI is triggered, the CPU will:"
  - 🧱  push [PC] and the flags onto the stack
  - 🏁  set ~I=1~, which disables user interrupts
  - 🐏  grab the value $AA00 by reading $FFFA and $FFFB (NMI's vector)
  - 🦘  jump to $AA00
  - 🚲  consume 7 cycles while doing all this
  - then, the interrupt handler will move the sprites and run `RTI` ("Return from Interrupt") to restore the previous state
  responses:
  - (*) what about the 7-cycle stuff? 🚲 [cycle]
  - (*) what's the purpose of the ~I~ flag? 🏁 [iflag]
  - great! I think I'm ready to implement it 😎 [exercise]

cycle:
  messages:
  - that's time it takes to process an interrupt 🕖
  - we didn't talk much about cycles so far
  - I've only made you add two mysterious properties to the 🧠  `CPU` class, remember?
  - those called `cycles` and `extraCycles`
  - I'll explain this further later, I promise 😅
  responses:
  - ...nmi

iflag:
  messages:
  - it's the "Interrupt Disable" flag, and as the name says, it disables interrupts
  - the system sets ~I=1~ so interrupt handlers don't get... hmm... interrupted 😅
  - |-
    the thing is... only <IRQ> events can be disabled
    <RESET> can't be ignored for obvious reasons
    NMI stands for "Non-maskable interrupt" and it's very important, so it can't be masked (aka "disabled")
  responses:
  - ...nmi

exercise:
  messages:
  - awesome
  - we'll model interrupts as `{ id, vector }` objects
  - check out 📄  ~/lib/interrupts.js~
  - |-
    📚  add this method to your 🧠  `CPU`:
    **interrupt(interrupt, withBFlag = false)**:
      **->** if ```javascript interrupt.id === "IRQ"``` and ~I=1~, returns 0
        (the interrupt is ignored)
      **->** pushes [PC] onto the stack
      **->** pushes the flags byte onto the stack
        (if `withBFlag` is ```javascript true```, the value is pushed with its bit 4 on)
        (otherwise, the value is pushed as is)
      **->** advances 7 cycles (```javascript this.cycle += 7```)
      **->** sets ~I=1~ in the flags register
      **->** sets [PC] = the result of reading the addresses ```javascript interrupt.vector``` and ```javascript interrupt.vector+1``` in Little Endian
        (remember that you have a `read16(...)` method for that)
      **->** returns 7
  responses:
  - (*) and `BRK`? [brk]

brk:
  messages:
  - |-
    📚  you can implement the `BRK` instruction just by calling
      ```javascript cpu.interrupt(interrupts.IRQ, true)```
  responses:
  - ...exercise
