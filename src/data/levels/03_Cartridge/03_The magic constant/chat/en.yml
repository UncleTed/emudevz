---
main:
  messages:
  - we preserve games in digital format with <game files> (also called <ROMs>)
  - these contain 🤖  <code>, 👾  <graphics>, and a 🗣️  <header> that identifies the hardware
  responses:
  - they're the famous <*.neees> files, right? [neeesfiles]

neeesfiles:
  messages:
  - right, the format is called iNEEES, and you should start by reading its <header>
  - "the first 4 bytes of a game file always contain the following:"
  - $4E $45 $53 $1A
  - that's <the magic constant> ✨
  - you should look for these bytes to check whether a ROM is valid or not
  responses:
  - what do you want me to do? [exercise]

exercise:
  messages:
  - 📚  add a constructor to the 💾  `Cartridge` class receiving the ROM bytes
  - 📚  save them in a property called `bytes`
  - 📚  if the magic constant doesn't match $4E $45 $53 $1A, throw an error with the "Invalid ROM." message
  responses:
  - (*) how can I add a constructor? 😳 [constructor]
  - (*) I need help checking the bytes 🥺 [help]
  - (*) help me throw an error 🤔 [errors]
  - (*) how can I debug? 🐞 [debug]

constructor:
  messages:
  - |-
    after adding a constructor and saving the bytes, your code should look like this:
      ```javascript
      export default class Cartridge {
        constructor(bytes) {
          this.bytes = bytes;
          // check the bytes here!
        }
      }```
  responses:
  - ...exercise

help:
  messages:
  - you'll receive a `Uint8Array`, which works similar to regular arrays!
  - so ```javascript bytes[0]``` represents the first byte, ```javascript bytes[1]``` the second one, and so on
  - remember that you can express hexadecimal notation with the ~0x~ prefix, i.e. `0x4e`
  responses:
  - ...exercise

errors:
  messages:
  - |-
    to throw errors, use:
      ```javascript throw new Error("a message");```
  responses:
  - ...exercise

debug:
  messages:
  - there's multiple ways of debugging your code
  - ➰  using the `repl` command to manually instantiate your classes or try JS expressions
  - 🐞  adding a `debugger;` statement to your code and using your browser's native dev tools
  - 🧾  adding a `console.log(...)`, which logs something into your browser's dev tools
  - |-
    🗃️  adding an `EmuDevz.log(...)`, which logs a string into the `Log` tab of the 🐞  <Debugger>
      (this one will be useful later, when running ROMs in the emulator)
  responses:
  - ...exercise

corollary:
  messages:
  - from now on, you can see your changes with the `diff` command
  - if you need to undo your changes, run the `restore` command
  responses:
  - ▶️  continue [end]
