---
main:
  messages:
  - you have to start somewhere 😅
  - <{architecture_unified.png;100x100}>
  - as I said earlier, you can start coding units in any order
  - and I'll patch BrokenNEEES so that it uses parts of your emulator...
  run-after-messages: |
    $.goTo("components");
  responses: []

components:
  messages:
  - "🧠  CPU: Choose this if you'd like to emulate concepts you've learned in the Assembly chapter."
  - "🖥️  PPU: Choose this if you want to go straight to the action and put graphics on the screen."
  - "🔊  APU: Choose this if you are curious to learn how to reproduce the sound in games."
  - I'd advise starting with the 🧠  CPU, but what do I know...
  responses:
  - 🧠  I'd like to start with the CPU [cpu]
  - 🖥️  I'd like to start with the PPU [ppu]
  - 🔊  I'd like to start with the APU [apu]

cpu:
  run: |
    const book = store.getState().book.instance;
    const chapter = book.getChapter(4);
    const firstLevelId = chapter.levels[0].id;
    store.dispatch.savedata.addCompletedLevelIfNeeded(level.id);
    store.dispatch.savedata.unlockChapter(firstLevelId);
    store.dispatch.savedata.advanceTo(firstLevelId);
  messages: []
  responses: []

ppu:
  run: |
    const book = store.getState().book.instance;
    const chapter = book.getChapter(5);
    const firstLevelId = chapter.levels[0].id;
    store.dispatch.savedata.addCompletedLevelIfNeeded(level.id);
    store.dispatch.savedata.unlockChapter(firstLevelId);
    store.dispatch.savedata.advanceTo(firstLevelId);
  messages: []
  responses: []

apu:
  run: |
    const book = store.getState().book.instance;
    const chapter = book.getChapter(6);
    const firstLevelId = chapter.levels[0].id;
    store.dispatch.savedata.addCompletedLevelIfNeeded(level.id);
    store.dispatch.savedata.unlockChapter(firstLevelId);
    store.dispatch.savedata.advanceTo(firstLevelId);
  messages: []
  responses: []
