---
main:
  messages:
  - hey!
  - do you have questions? 👀
  responses:
  - (*) a game about coding emulators? <why>? [why]
  - (*) but is it a <game> or a <tutorial>? [tutorial]
  - (*) so the NEEES, huh? [name]
  - (*) does the game require <programming knowledge>? [requirements]
  - (*) what <topics> are covered? [topics]
  - (*) is this <free> / open-source? [free]

why:
  messages:
  - yeah
  - it was <super fun> for me to build my first emulator 👾
  - and I want to encourage others to learn how to build one too!
  responses:
  - ...main

tutorial:
  messages:
  - honestly, whatever you want to call it! 🤷
  - I'd say <it's a game> since it has a clear goal, a set of rules, and tasks where you can succeed or fail
  responses:
  - ...main

name:
  messages:
  - yep 🙂
  - it's like the <NES> but simplified for didactics
  - it runs most <NES games> fine, except those that rely on trickier hardware details
  responses:
  - ...main

requirements:
  messages:
  - some <object-oriented programming> knowledge and <basic understanding> of computer systems will be assumed
  - "(that is: bytes, signed integers, boolean logic, numbering systems, etc.)"
  - the coding will be done in JavaScript
  responses:
  - ...main

topics:
  messages:
  - the player will receive a <buggy> (but <modular>) emulator called BrokenNEEES
  - and the objective is to replace the broken units with new ones coded from scratch
  - in any order!
  - |-
    you can <expect to learn>:
      **->** 🔨  Basic 6502 assembly
      **->** 💾  Cartridge emulation
      **->** 🚌  Memory buses emulation
      **->** 🎮  Controller emulation
      **->** 🧠  CPU emulation (official instructions), tested with <nestest> and unit tests
      **->** 🖥️  PPU emulation, tested with video and unit tests
      **->** 🔊  APU emulation, tested with audio and unit tests
      **->** 🗜️  Mapper emulation as a bonus
  - |-
    things that will be <out of scope>:
      **->** 👮  Illegal opcodes
      **->** 🎯  Accurate timing
      **->** 🔌  Open-bus behavior
      **->** 👻  Obscure hardware quirks
      **->** ✋  APU interrupts
  - |-
    things that will be <semi-out of scope> (explained, but already resolved):
      **->** 🔄  Synchronization between units
      **->** ✨  Emulator frontend (platform-specific code)
      **->** 📥  Save states
  - |-
    also, the game will provide library files to facilitate some tasks like:
      **->** 📜  Correct PPU scrolling (with <Loopy>'s `t` and `v` registers)
      **->** 🤏  APU DPCM playback
  responses:
  - why not target <accuracy>? [accuracy]


accuracy:
  messages:
  - I think trying to achieve accuracy in a first emulation project is a <bad idea> 💀
  - as it would only add unnecessary complexity and put off players from learning the important concepts
  - |+
    people can learn the basics about the hardware and emulation, and target accuracy <later>
  - in other words, when you finish this, you'll have a solid emulator that runs a big percentage of <NES games> from mappers 0 to 4
  - |+
    it won't pass a lot of <Blargg>'s test ROMs, but it'll look and sound fine! just don't expect to build the next <Mesen> 😊
  - things are <simplified> here, and this is also why I picked a different name for the console
  - if any doubts, this is not a <NES>! so it cannot be inaccurate to something it isn't 😉
  responses:
  - ...main

free:
  messages:
  - it is 👍
  - though if you like the work, I'd happily accept donations :-)
  - basically the code is <MIT>-licensed while the levels are <CC BY-NC>
  - check out the <Credits> section for all the details
  responses:
  - ...main
