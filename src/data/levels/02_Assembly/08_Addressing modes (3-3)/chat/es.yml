---
main:
  run: |
    set((m) => {
      m.chat.winOnEnd = true;
      m.chat.stopBlock = locales.get("not_now");
      m.$canRun = false;
    });
    {{Bottom}}.setMemoryStart(0x0);
  messages:
  - ahora, los más dementes 😓
  - empecemos con "Indexed Indirect"
  - es como una mezcla entre "Zero Page,X" e "Indirect"
  - básicamente, tomas la dirección de la página cero, sumas el valor de [X] a ella
  - luego usas eso para buscar una dirección de dos bytes
  responses:
  - esto está empezando a volverse oscuro [what]

what:
  run-after-messages: |
    set((m) => m.$canRun = true);
  messages:
  - lo sé 😅 🔫
  - probemos con un ejemplo
  - corre las primeras 4 instrucciones ⏩
  events:
  - step [step1]

step1:
  messages: []
  events:
  - step [step2]

step2:
  messages: []
  events:
  - step [step3]

step3:
  messages: []
  events:
  - step [step4]

step4:
  run: |
    set((m) => m.$canRun = false);
  run-after-messages: |
    set((m) => m.$canRun = true);
  messages:
  - hemos configurado la memoria para direccionamiento indirecto
  - en la dirección $0003, tenemos un $80
  - en la dirección $0004, tenemos un $40
  - ahora voy a cambiar el <Visor de Memoria> a la sección habitual
  - ejecuta las otras 3 instrucciones ⏩
  events:
  - step [step5]

step5:
  run: |
    {{Bottom}}.setMemoryStart(0x4020);
    {{Bottom}}.setSelectedCells([0x402c, 0x402d]);
  messages: []
  events:
  - step [step6]

step6:
  messages: []
  events:
  - step [step7]

step7:
  run: |
    set((m) => m.$canRun = false);
  messages:
  - cargamos un $FA en [A] y un $02 en [X]
  - "`STA ($01,X)` puede ser interpretado como `STA ($01+X)`"
  - por lo que si sumamos [X], obtendríamos `STA ($0003)`
  - desde aquí, las cosas proceden como un direccionamiento "Indirect" estándar
  - esto termina escribiendo el valor de [A] en $4080
  - <{STA_indexedindirect.png}>
  responses:
  - (*) ¿cómo es eso? 🤨 [whatwasthat]
  - tiene todo el sentido 👍 [makessense]

whatwasthat:
  messages:
  - ¿recuerdas el modo "Indirect"?
  - construye una dirección leyendo otra dirección y su byte consecutivo
  - en este caso, leyó un $80 de $0003 y un $40 de $0004
  - usó el primero como el byte menos significativo
  - y el último como el byte más significativo
  - por lo que la dirección resultante fue $4080 ✨
  responses:
  - ...step7

makessense:
  run: |
    {{Bottom}}.setSelectedCells([0x4030, 0x4031]);
  run-after-messages: |
    set((m) => m.$canRun = true);
  messages:
  - hablemos de "Indirect Indexed"
  - el último, lo prometo 🤞
  - en lugar de sumar [X] a la dirección <antes> de evaluar la indirección
  - suma [Y] justo <después> de hacerlo
  - ejecuta el código restante ⏩
  - y ten en mente que hay un $BE precargado en $4085
  events:
  - step [step8]

step8:
  messages: []
  events:
  - step [step9]

step9:
  messages:
  - ese $BE fue cargado en [A] 🤯
  - como vimos anteriormente, en nuestra configuración actual ($0003) evalúa a $4080
  - la instrucción solo sumó [Y] a eso, así que la dirección final fue $4085
  - <{LDA_indirectindexed.png}>
  responses:
  - creo que me estresé, ¿podemos omitir la práctica? 😓 [skip]

skip:
  messages:
  - claro, no vas a ver mucho esto de todas formas
  - vas a programar un emulador
  - por lo que necesitas construir un <intérprete> para estas cosas
  - no las cosas en sí mismas 😉
  responses:
  - entiendo... [end]
