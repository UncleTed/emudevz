---
main:
  run: |
    set((m) => m.chat.winOnEnd = true);
  messages:
  - "`JSR` and `RTS` (\"Jump to Subroutine\" and \"Return from Subroutine\") are a dynamic duo that you'll usually see used together"
  - "`JSR` jumps to another part of the code, and `RTS` returns to the previous position"
  - it's basically like calling a function and returning! 📞
  - check out the example ⏩
  responses:
  - how does it know where to return? 😲 [where]

where:
  messages:
  - well, `JSR` pushes the address of the next instruction (minus 1) onto the stack before jumping to the given location
  - then, `RTS` pops this address, adds 1 to it, and jumps to that location
  - the example code illustrates how both can be used together to create modular code 🗃️
  - <{JSR_RTS.png}>
  responses:
  - (*) why didn't you use the label names? [label]
  - awesome! [awesome]

label:
  messages:
  - the assembler I found doesn't support that 😔
  - but I'm sure that's possible with other assemblers
  - and `JSR @init` would generate the same machine code as `JSR $4029`
  responses:
  - ...where

awesome:
  messages:
  - we've learned enough 6502 assembly
  - let's jump to the next chapter, so we can start coding our emulator 🙃
  responses:
  - "`JMP @nextChapter` [end]"
