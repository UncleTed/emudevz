---
main:
  messages:
  - "📚  you'll start by creating two classes: `Register8Bit` and `Register16Bit` 🔢"
  - |-
    they should have two methods:
    **getValue()**:
      __-> returns the register's content__
    **setValue(value)**:
      __-> sets the register's content__
  - the register's content starts from 0 and can be an 8-bit number (0-255) or a 16-bit number (0-65535), depending on the class
  responses:
  - (*) what if I try to write off the limits? 🚫 [limit]
  - (*) what's the best way to implement this? 🤔 [implement]
  - ✔️  I created the classes, now what? [nowwhat]

limit:
  messages:
  - it wraps 🎁 , and the resulting value always ends up being inside the valid range
  - |-
    here, some examples:
    ```raw ___________________________
    |  Type  | Write | Result |
    |--------|-------|--------|
    | 8-bit  | 258   | 2      |
    | 8-bit  | 518   | 6      |
    | 8-bit  | -2    | 254    |
    | 8-bit  | -128  | 128    |
    | 8-bit  | -200  | 56     |
    | 16-bit | 65536 | 0      |
     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾```
  responses:
  - ...main

implement:
  messages:
  - I'd create typed arrays containing just one element, like ```javascript new Uint8Array(1)``` and ```javascript new Uint16Array(1)```
  - then, when you do something like ```javascript array[0] = 258;```, the wrapping will be performed automatically ✨
  responses:
  - ...main

nowwhat:
  messages:
  - |-
    then, add the following constructor to your `CPU` class:
      ```javascript
      export default class CPU {
        constructor() {
          this.cycle = 0;
          this.extraCycles = 0;

          this.a = new Register8Bit();
          this.x = new Register8Bit();
          this.y = new Register8Bit();
          this.sp = new Register8Bit();
          this.pc = new Register16Bit();
        }
      }```
  responses: []
