---
main:
  messages:
  - también necesitas emular el bus de memoria
  - la CPU tiene 2 KiB de RAM 🐏
  - pero el espacio direccionable completo es 64 KiB
  - identificamos una ubicación de memoria con una <dirección de memoria> (un número de 16 bits)
  responses:
  - entonces, si solo 2 KiB son RAM de verdad, ¿qué hay en los otros 62 KiB? 🤨 [other62]

other62:
  messages:
  - otras cosas, como espejos de RAM, E/S mapeada en memoria y la información del cartucho
  - el mapa de memoria tiene una estructura muy específica, mira ~/docs/cpu/cpu_memory.es.md~
  run-after-messages: |
    store.dispatch.savedata.openFile("/docs/cpu/cpu_memory.es.md");
  responses:
  - (*) ¿qué es "E/S mapeada en memoria"? 🗺️ [io]
  - 👌  ya veo... ¿qué necesito implementar? [implement]

io:
  messages:
  - un esquema en el cual las direcciones de memoria están conectadas a dispositivos físicos
  - por ejemplo...
  - leer $4016 leerá los botones presionados del 🎮  mando
  - escribir los registros de la 🖥️  PPU en $2000-$2007 modificará la pantalla
  - escribir los registros de la 🔊  APU en $4000-$4013 producirá sonidos
  - leer $8000 probablemente leerá el primer byte de <PRG-ROM> del 💾  cartucho
  responses:
  - ...other62

implement:
  messages:
  - por ahora, solo vamos a implementar los dos primeros rangos del mapa de memoria
  - 📚  crea una clase `CPUMemory` con un constructor
  - debería asignar una propiedad `ram` (un `Uint8Array` de 2048 bytes)
  - |-
    implementa estos dos métodos:
    **read(address)**:
      __-> si <address> está dentro de $0000-$07FF, retorna el byte correspondiente de <ram>
      -> si <address> está dentro de $0800-$1FFF, retorna un byte espejado de <ram>
        (por ej. $0802 se vuelve $0002, $1023 se vuelve $0023)
      -> caso contrario, retorna 0__
    **write(address, value)**:
      __-> similar a *read*, pero escribe el <value> en lugar de retornar__
  - |-
    luego, agrega al constructor de tu `CPU`:
    ```javascript this.memory = new CPUMemory();```
  responses:
  - necesito ayuda con los bytes espejados 📐 [help]

help:
  messages:
  - para saber qué dirección leer
  - tienes que sustraer el inicio del rango
  - luego, usa el operador ~%~ (resto) con el tamaño de la sección de memoria que queremos espejar
  - |-
    por ejemplo, veamos el 4to rango ("🚽  Espejo de $2000-2007")
      inicio del rango => $2008
      rango a espejar => $2000-$2007
      tamaño del rango a espejar => $0008
  - |-
    entonces, haríamos:
      ```javascript (address - 0x2008) % 0x0008```
    
  responses: []
