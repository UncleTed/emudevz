main:
  messages:
  - now that our emulator is able to access 🛸 📖  OAM
  - we are ready to read 🛸  sprites!
  responses:
  - what's in OAM? [oam]

oam:
  messages:
  - "here's a document that explains the OAM table format:"
  - 📄  ~/docs/ppu/sprite_rendering.en.md~
  - "also, you should make use of my `Sprite` class:"
  - 📄  ~/lib/ppu/Sprite.js~
  - it takes care of some stuff like parsing the attributes
  responses:
  - thx, but I still need to read the OAM, right? [implement]

implement:
  messages:
  - correct ✅
  - 📚  create a 🛸  `SpriteRenderer` class
  - 📚  its constructor should receive and assign a `ppu` property with the PPU instance
  - |-
    📚  make this change to the 🖥️  `PPU` class:
    **constructor(cpu)**:
      **->** instantiates the sprite renderer:
        ```javascript this.spriteRenderer = new SpriteRenderer(this)```
        (remember to import it if you defined it in another file!)
  - |-
    📚  now, in the 🛸  `SpriteRenderer` class, define:
    **_createSprite(id)**:
      **->** returns a new `Sprite` instance, by reading the OAM index `id`
      (remember to add 1 to the Y coordinate!)
  responses:
  - why should I add 1 to the Y coordinate? ➕ [addone]
  - how do I know if the sprite is ~8x8~ or ~8x16~? 📏 [spritesize]
  - how do I know the tile id / pattern table id? 🕊️ 📖 [patterntable]

addone:
  messages:
  - because sprite data is delayed by one scanline 💤
  - on real hardware, sprites are drawn one line lower than the Y coordinate that games set in the OAM
  - i.e. if byte 0 of an OAM entry is set to 0, it's drawn at line 1
  - and there's no way to draw a sprite starting from line 0
  responses:
  - ...implement

spritesize:
  messages:
  - that's a global setting, configured in 🎛️  PPUCtrl
  - when ```javascript ppu.registers.ppuCtrl.spriteSize === 1```, sprites should use the ~8x16~ mode
  responses:
  - ...implement

patterntable:
  messages:
  - in ~8x8~ mode, the tile id is `byte1` of the OAM entry, and the pattern table id is ```javascript ppu.registers.ppuCtrl.sprite8x8PatternTableId```
  - in ~8x16~ mode, the tile id is ```javascript (byte1 & 0b11111110)``` and the pattern table id is ```javascript (byte1 & 0b00000001)```
  responses:
  - ...implement
