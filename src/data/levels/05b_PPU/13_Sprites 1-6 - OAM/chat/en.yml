main:
  messages:
  - now that our emulator is able to access 🛸 📖  ~OAM~
  - we are ready to read 🛸  ~sprites~!
  responses:
  - what's in OAM? [oam]

oam:
  messages:
  - "here's a document that explains the OAM table format:"
  - 📄  ~/docs/ppu/sprite_rendering.en.md~
  - "also, you should make use of my `Sprite` class:"
  - 📄  ~/lib/ppu/Sprite.js~
  - it takes care of some stuff like parsing the attributes
  responses:
  - thx, but I still need to read the OAM, right? [implement]

implement:
  messages:
  - correct ✅
  - 📚  _-_create a `SpriteRenderer` class_--_
  - 📚  _-_its constructor should receive and assign a `ppu` property with the PPU instance_--_
  - |-
    📚  _-_make this change to the `PPU` class:_--_
    *_-_*constructor**:_--_
      *_-_*->** instantiates the sprite renderer:_--_
        _-_```javascript this.spriteRenderer = new SpriteRenderer(this)```_--_
        _-_(remember to import it if you defined it in another file!)_--_
  - |-
    📚  _-_now, in the `SpriteRenderer` class, define:_--_
    *_-_*_createSprite(id)**:_--_
      *_-_*->** returns a new ~Sprite~ instance, by reading the OAM index ~id~_--_
      _-_(remember to add 1 to the Y coordinate!)_--_
  responses:
  - why should I add 1 to the Y coordinate? ➕ [addone]
  - how do I know if the sprite is 8x8 or 8x16? 📏 [spritesize]
  - how do I know the tile id / pattern table id? 🕊️ 📖 [patterntable]

addone:
  messages:
  - because sprite data is delayed by one scanline 💤
  - on real hardware, sprites are drawn one line lower than the Y coordinate that games set in the OAM
  - i.e. if byte 0 of an OAM entry is set to 0, it's drawn at line 1
  - and there's no way to draw a sprite starting from line 0
  responses:
  - ...implement

spritesize:
  messages:
  - that's a global setting, configured in 🎛️  ~PPUCtrl~
  - sprites should use the 8x16 mode when ~ppu.registers.ppuCtrl.spriteSize === 1~
  responses:
  - ...implement

patterntable:
  messages:
  - RTFM!
  responses:
  - ...implement
