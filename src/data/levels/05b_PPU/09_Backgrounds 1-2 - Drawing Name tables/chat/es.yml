---
main:
  messages:
  - ahora que podemos...
  - ¡comenzaremos a dibujar 🏞️  fondos!
  responses:
  - ¡por fin! [exercise]

exercise:
  messages:
  - esta vez, tendrás que seguir la documentación
  - lee 📄  ~/docs/ppu/background_rendering.es.md~
  - y trata de entender cómo renderizar fondos en <escala de grises>
  - cuando hayas terminado...
  - 📚  crea una clase 🏞️  `BackgroundRenderer`
  - 📚  su constructor debe recibir y asignar una propiedad `ppu` con la instancia de PPU
  - |-
    📚  <haz estos cambios> en la clase 🖥️  `PPU`:
    **constructor(cpu)**:
      **->** instancia el renderizador de fondos:
        ```javascript this.backgroundRenderer = new BackgroundRenderer(this)```
      (¡recuerda importarlo si lo definiste en otro archivo!)
    **step(...)**:
      **->** elimina el código de prueba (```javascript // <test>...</test>```)
    **_onVisibleLine()**:
      **->** si el ciclo es ~0~, llama a `backgroundRenderer.renderScanline()`
  - |-
    📚  ahora, en la clase 🏞️  `BackgroundRenderer`, define:
    **renderScanline()**:
      **->** <agrega el código necesario> para renderizar una línea completa del fondo
  - ¡adiós!
  responses:
  - "\"¿agrega el código necesario\"? ¿en serio? ¿eso es todo? [questions]"

questions:
  messages:
  - ¿qué? ¿necesitas ayuda?
  responses:
  - (*) entonces, ¿cuántos píxeles debería dibujar? ⏹ [howmany]
  - (*) ¿cómo sé la línea actual? 🌠 [line]
  - (*) ayúdame un poco 🆘 [help]
  - (*) lo hice, pero algunos juegos no parecen funcionar 🤔 [work]

howmany:
  messages:
  - la pantalla es de ~256x240~
  - necesitas `plot`ear exactamente 256 píxeles para cada línea visible
  - en la vida real, el hardware renderiza un píxel por ciclo, pero aquí lo haremos todo a la vez (por simplicidad)
  - por lo tanto, solo deberías renderizar la línea cuando `cycle` sea 256
  responses:
  - ...questions

line:
  messages:
  - la línea actual está representada por ```javascript this.ppu.scanline```
  responses:
  - ...questions

help:
  messages:
  - sabes que ```javascript y = this.ppu.scanline```
  - y que necesitas dibujar desde ~x = 0~ hasta ~x = 255~
  - también sabes que la pantalla es una cuadrícula de ~32x32~ tiles (de ~8x8~ píxeles cada uno)
  - y por último, ¡ya sabes cómo dibujar un tile usando tu clase 🕊️  `Tile`!
  - |-
    una forma de implementar esto es hacer algo como:
      ```javascript
      const y = this.ppu.scanline;
      for (let x = 0; x < 256; x += 8) {
        const nameTableId = 0; // TODO: Obtener el id de la name table
        const patternTableId = 0; // TODO: Obtener el id de la pattern table

        const tileX = Math.floor(x / 8);
        const tileY = Math.floor(y / 8);
        const tileIndex = tileY * 32 + tileX;
        const tileId = 0; // TODO: Leer el id del tile desde la memoria

        const tileInsideY = y % 8;

        const tile = new Tile(this.ppu, patternTableId, tileId, tileInsideY);
        for (let xx = 0; xx < 8; xx++) {
          const colorIndex = tile.getColorIndex(xx);
          // TODO: Plotear cada pixel del tile
        }
      }```
  responses:
  - ...questions

work:
  messages:
  - bueno, ¡todavía tenemos mucho que hacer!
  - lo importante es que algunos juegos ahora deberían mostrar su fondo correctamente
  - por ejemplo, echa un vistazo a 📄  ~/roms/_test/hello_world.neees~
  - y compara la salida alternando entre BrokenNEEES y tu emulador ✨
  responses:
  - ...questions
