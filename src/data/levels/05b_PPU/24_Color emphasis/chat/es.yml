main:
  messages:
  - el PPU es capaz de "transformar" los colores de salida hasta cierto punto
  - ðŸŽ­  PPUMask tiene algunos bits que activan el <modo de escala de grises> o <Ã©nfasis de color>
  - es decir, enfatizando los componentes rojo, verde o azul de cada color
  responses:
  - Â¿cÃ³mo funciona? [how]

how:
  messages:
  - el bit 0 convierte la salida a <escala de grises>
  - el bit 5 enfatiza el <rojo> (oscureciendo el verde y el azul en un 25%)
  - el bit 6 enfatiza el <verde> (oscureciendo el rojo y el azul en un 25%)
  - el bit 7 enfatiza el <azul> (oscureciendo el rojo y el verde en un 25%)
  - si los tres bits de Ã©nfasis estÃ¡n habilitados al mismo tiempo, todos los colores estarÃ¡n un ~25%~ mÃ¡s oscuros
  - el <Ã©nfasis de color> es independiente del <modo de escala de grises>, por lo que los bits de Ã©nfasis aÃºn tiÃ±en el color de la imagen en escala de grises
  responses:
  - entonces... [exercise]

exercise:
  messages:
  - abre ðŸ“„  ~/docs/ppu/video_registers.en.md~
  - ðŸ“š  en ðŸŽ­  `PPUMask`, edita el mÃ©todo `onLoad()` y usa `addField(...)` para mapear los bits `grayscale`, `emphasizeRed`, `emphasizeGreen` y `emphasizeBlue`
  - |-
    ðŸ“š  agrega este mÃ©todo:
    **transform(color)**:
      **->** divide el color en componentes `r`, `g` y `b`:
        ```javascript let r = (color >> 0) & 0xff;```
        ```javascript let g = (color >> 8) & 0xff;```
        ```javascript let b = (color >> 16) & 0xff;```

      **->** si ```javascript this.grayscale```:
        **->** `r = g = b = Math.floor((r + g + b) / 3)`

      **->** si ALGÃšN bit de Ã©nfasis estÃ¡ habilitado:
        **->** verifica si TODOS los bits de Ã©nfasis estÃ¡n habilitados
          (llamemos a esto `all`)
        
        **->** para cada `r`, `g` y `b`:
          **->** si el bit NO estÃ¡ habilitado o todos (`all`) estÃ¡n habilitados:
           **->** disminuye el brillo del componente en un ~25%~:
              por ejemplo, el rojo serÃ­a:
              ```javascript r = Math.floor(r * 0.75)```

      **->** retorna el color actualizado:
        ```javascript 0xff000000 | (r << 0) | (g << 8) | (b << 16);```
  - ðŸ“š  y lo mÃ¡s importante, ahora `PPU::plot(...)` necesita llamar al mÃ©todo transform de ðŸŽ­  `PPUMask` en lugar de usar directamente el `color`
  responses: []
