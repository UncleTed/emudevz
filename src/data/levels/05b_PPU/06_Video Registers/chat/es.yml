---
main:
  messages:
  - la 🧠  CPU y 🖥️  PPU se comunican entre ellas a través de un conjunto de 9 registros mapeados en memoria
  - estos viven en las direcciones CPU $2000-$2007 y $4014
  - echa un vistazo a 📄  ~/docs/ppu/video_registers.es.md~
  - algunos de ellos son 🔍  <solo lectura> (leídos por 🧠  CPU, escritos por 🖥️  PPU)
  - algunos son ✏️  <solo escritura> (leídos por 🖥️  PPU, escritos por 🧠  CPU)
  - y algunos son <bidireccionales> 🔍  ✏️
  responses:
  - dame un ejemplo 🙏 [example]
  - <<level.isCompleted || m.$exercise>> 📚  llévame a la acción [useit]

example:
  messages:
  - hay dos 🕊️ 📖  pattern tables, ¿recuerdas?
  - bueno, el código de un juego debe decirle al PPU cuál debería usar
  - para fondos, esto es controlado por el bit 4 de $2000 (🎛️  PPUCtrl)
  - lo llamamos ~B~ en nuestra columna ~Bits~
  - entonces, por ejemplo, si un juego quiere usar la segunda tabla, escribiría un 16 (binario ```raw 000```~1~```raw 0000```) en $2000
  - ¡o cualquier número que tenga el bit 4 encendido!
  - una escritura en $2000 afecta 6 parámetros al mismo tiempo (~V~, ~H~, ~B~, ~S~, ~I~, y ~NN~)
  - <{PPUCtrl.png}>
  responses:
  - ¿entonces, estos registros solo contienen números? 🔢 [numbers]

numbers:
  messages:
  - sí, pero algunos producen <efectos especiales> cuando la 🧠  CPU los lee o escribe
  - estos efectos secundarios pueden reiniciar un buffer interno, incrementar contadores, ¡o incluso copiar datos!
  - "he programado una clase que te ayudará a implementar esto, deberías usarla 📖"
  - 📄  ~/lib/InMemoryRegister.js~
  responses:
  - ¿cómo puedo usarla? [useit]

useit:
  run: |
    set((m) => m.$exercise = true);
  messages:
  - abre 📄  ~/tmpl/ppu/VideoRegisters.js~ y úsalo como plantilla
  - los registros 🎛️  `PPUCtrl` y 📊  `PPUStatus` ya están implementados
  - observa cómo llaman a `addField(...)` por cada parámetro definido en la columna ~Bits~ del archivo de documentación, indicando el bit de inicio y su tamaño (cuando son mayores a 1 bit)
  - "esto crea <propiedades mágicas>: después de la llamada a `onWrite(...)`, la PPU podrá acceder a sus valores (p.ej. ```javascript ppuCtrl.spriteSize```)"
  - en el caso de 📊  `PPUStatus`, usa `addWritableField(...)` porque la PPU necesita escribirlos (p. ej. ```javascript ppuStatus.isInVBlankInterval = 1```) para que la CPU pueda leer los valores actualizados mediante `onRead()`
  - 📚  crea una clase `VideoRegisters`, utilizando esa plantilla
  - |-
    📚  agrega una propiedad `registers` a 🖥️  `PPU`, asignada a:
         ```javascript new VideoRegisters(this)```
  - "📚  finalmente, mapéalos en 🐏  `CPUMemory` (regiones $2000-$2007 y $4014):"
  - las <lecturas> deberían retornar ```javascript this.ppu.registers.read(address)```
  - las <escrituras> deberían llamar a ```javascript this.ppu.registers.write(address, value)``` y retornar
  responses: []
