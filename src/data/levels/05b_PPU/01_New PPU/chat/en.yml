---
main:
  run: |
    {{Top}}.load("rendering.png");
  messages:
  - buckle up, we're gonna start drawing <actual pixels> to the screen! 🖥️
  - but first we need to learn some things
  - you'll see... it's all about timing ⏱️
  - 🚲  cycles, 🌠  scanlines, and 🖼️  frames!
  responses:
  - what do you mean? [wdym]

wdym:
  messages:
  - 📈  the NEEES generates a ~60FPS~ video signal
  - 🖼️  each frame is a ~256x240~ image (think of it as a pixel grid)
  - 🌠  a scanline would be one row of that grid
  - 🚲  oh, and each scanline takes 341 PPU cycles to render
  responses:
  - and... what's a cycle? 🚲 [cycles]

cycles:
  messages:
  - each operation that the PPU does takes a certain amount of time, which we measure in cycles
  - these are just fractions of a second, and a lot happens in a single cycle!
  - the PPU can read or write data, or even draw a pixel on the screen 🎨
  responses:
  - (*) are PPU cycles the same as CPU cycles? 🤔 [same]
  - how does the drawing work? 🖌️ [drawing]

same:
  messages:
  - conceptually, yes, but the 🖥️  PPU runs <3x> faster than the 🧠  CPU
  - so PPU cycles are faster (each PPU cycle is, in time, ~1/3~ of a CPU cycle)
  - <{unit_speeds.png}>
  responses:
  - ...cycles

drawing:
  run: |
    {{Top}}.load("scanlines.gif");
  messages:
  - it draws from top to bottom, one scanline at a time, one pixel per cycle
  - the first 240 scanlines make up the visible part of the picture
  - there are also some extra non-visible scanlines, which gives the PPU some time to rest 🏖️
  responses:
  - what do you mean by "time to rest"? [vblank_hblank]

vblank_hblank:
  run: |
    {{Top}}.load("rendering.png");
  messages:
  - during each scanline (after it has drawn all the pixels), it gets a small break known as the Horizontal Blank, or HBlank
  - and at the end of all visible scanlines, it gets a longer break, the Vertical Blank, or VBlank 🏝️
  - during VBlank/HBlank time, the PPU isn't drawing any pixels, and that gives the program a chance to update the screen
  responses:
  - got it, what's next? [exercise]

exercise:
  messages:
  - 📚  create a file for the PPU code, using 📄  ~/tmpl/ppu/PPU.js~ as a template
  - |-
    📚  to keep track of the timing, add this method:
    **step()**:
      **->** increments `cycle`
      **->** if ```javascript cycle >= 341```:
        **->** sets ```javascript cycle = 0```
        **->** increments `scanline`
        **->** if ```javascript scanline >= 261```:
          **->** sets ```javascript scanline = -1```
          **->** increments `frame`
  - 📚  then, import your file from 📄  ~/code/index.js~
  - and add the corresponding `PPU` key to the exported object
  responses:
  - (*) why does the scanline counter start at -1? 😕 [minus1]

minus1:
  messages:
  - the scanline ~-1~ (also called pre-line) is a non-visible line, in which the PPU gets things ready for the upcoming frame
  - during this time, it resets some important status flags
  - more on that later! 🔜
  responses:
  - ...exercise
