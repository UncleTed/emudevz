main:
  messages:
  - el hardware tiene un mecanismo para detectar colisiones entre el primer sprite en OAM (sprite cero) y el fondo
  - se llama sprite-zero hit, y se activa cuando un píxel opaco del sprite cero se superpone a un píxel opaco del fondo
  - cuando eso ocurre, la PPU enciende la bandera de sprite-zero hit en 📊  `PPUStatus` y los juegos pueden leerla
  responses:
  - ¿para qué se utiliza? [usage]

usage:
  run: |
    {{Top}}.load("sprite_zero_splitscreen.png");
  messages:
  - los juegos lo utilizan para realizar <efectos de pantalla dividida> (por ejemplo, tener un HUD estático en la parte superior y un fondo desplazándose en la parte inferior)
  - había un juego de un plomero que usaba ese truco 👨 🔧
  - <{sprite_zero_splitscreen.png}>
  - al colocar un sprite de moneda (el sprite cero) arriba de una moneda en el fondo, la PPU activa un sprite-zero hit cuando esa parte de la pantalla se renderiza
  - esto permite al juego detectar el momento en que la PPU alcanza una scanline específica, y luego cambiar las coordenadas de scrolling a mitad del frame
  responses:
  - aaah [exercise]

exercise:
  run: |
    {{Top}}.load(null, "rom");
  messages:
  - |-
    📚  en 🛸  `SpriteRenderer`, <modifica> el método `_render(...)`; debajo de `buffer[x] = ...`, agrega:
    **->** si el `sprite.id` es 0 <Y> el píxel de fondo en ~(x, y)~ es opaco:
      **->** asigna ```javascript this.ppu.registers.ppuStatus.sprite0Hit = 1```
  - 📚  ah, y reinicia `sprite0Hit` en `PPU::_onPreLine()`, ¡igual que hiciste con las otras dos banderas!
  responses: []

corollary:
  messages:
  - los juegos que usan este truco para <efectos de pantalla dividida> tienden a congelarse si el sprite-zero hit no está implementado correctamente
  - intenta ejecutar 👨‍ 🔧  ese <juego del plomero> o 🐺 ⛓️  ~Wolfling~, ¡ya no deberían congelarse!
  responses:
  - ▶️  continuar [end]
