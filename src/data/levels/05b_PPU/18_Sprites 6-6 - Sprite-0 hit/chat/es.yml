main:
  messages:
  - el hardware tiene un mecanismo para detectar colisiones entre el primer sprite en OAM (sprite 0) y el fondo
  - se llama <sprite-0 hit>, y se activa cuando un pÃ­xel opaco de <sprite 0> se superpone a un pÃ­xel opaco del fondo
  - cuando eso ocurre, la PPU establece la bandera de sprite-0 hit en ğŸ“Š  `PPUStatus` y los juegos pueden leerla
  responses:
  - Â¿para quÃ© se utiliza? [usage]

usage:
  messages:
  - los juegos lo utilizan para realizar <efectos de pantalla dividida> (por ejemplo, tener un HUD estÃ¡tico en la parte superior y un fondo desplazÃ¡ndose en la parte inferior)
  - habÃ­a un juego de un plomero que usaba ese truco ğŸ‘¨ ğŸ”§
  - al colocar el sprite 0 en una posiciÃ³n especÃ­fica en el fondo, la PPU activa un sprite-0 hit cuando esa parte de la pantalla se renderiza
  - esto permite a los juegos detectar el momento en que la PPU alcanza una scanline especÃ­fica, y luego cambiar las coordenadas de scrolling a mitad del frame
  responses:
  - aaah [aahh]

aahh:
  messages:
  - |-
    ğŸ“š  en `SpriteRenderer`, modifica el mÃ©todo `_render(...)`; debajo de `buffer[x] = ...`, agrega:
    **->** si el `sprite.id` es 0 Y el pÃ­xel de fondo en ~(x, y)~ es opaco:
      **->** asigna ```javascript this.ppu.registers.ppuStatus.sprite0Hit = 1```
  - ğŸ“š  ah, y reinicia `sprite0Hit` en `PPU::_onPreLine()`, Â¡igual que hiciste con las otras dos banderas!
  responses: []
