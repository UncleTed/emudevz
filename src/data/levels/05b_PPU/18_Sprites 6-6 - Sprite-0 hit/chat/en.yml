main:
  messages:
  - the hardware has a mechanism to detect collisions between the first sprite in OAM (sprite zero) and the background
  - it's called the sprite-zero hit, and it's triggered when an opaque pixel of the sprite zero overlaps an opaque pixel of the background
  - when that happens, the PPU sets the sprite-zero hit flag in ðŸ“Š  `PPUStatus` and games can read it
  responses:
  - what's it used for? [usage]

usage:
  messages:
  - games use it to perform <split-screen effects> (for example, having a static HUD at the top and a scrolling background at the bottom)
  - there was a game about a plumber that used that trick ðŸ‘¨ ðŸ”§
  - by placing sprite zero at a specific position in the background, the PPU would trigger a sprite-zero hit when that part of the screen was rendered
  - this allows games to detect the moment the PPU has reached a specific scanline, and then change the scroll coordinates mid-frame
  responses:
  - aahh [aahh]

aahh:
  messages:
  - |-
    ðŸ“š  in ðŸ›¸  `SpriteRenderer`, change the `_render(...)` method; below `buffer[x] = ...`, add:
    **->** if the `sprite.id` is 0 <AND> the background pixel in ~(x, y)~ is opaque:
      **->** sets ```javascript this.ppu.registers.ppuStatus.sprite0Hit = 1```
  - ðŸ“š  ah, and reset `sprite0Hit` in `PPU::_onPreLine()`, just like you did with the other two flags!
  responses: []
