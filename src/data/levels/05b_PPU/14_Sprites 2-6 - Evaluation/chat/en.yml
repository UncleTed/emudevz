main:
  messages:
  - on each scanline, the sprite renderer performs a sprite evaluation 🕵️
  - it prepares the sprites that need to be rendered
  responses:
  - mhm... how does it know? [how]

how:
  messages:
  - it scans the entire OAM table, checking whether each sprite should be drawn in the current scanline (based on ~x~, ~y~, and ~height~)
  - it chooses the first 8 sprites
  - after finding 8 (the maximum number of sprites per scanline), if it finds <more> visible sprites, the 🏁  sprite overflow flag (bit 5 of 📊  PPUStatus) is set to notify the error to the game developer
  - sprites with lower ids are rendered on top of sprites with higher ids, so you should reverse the chosen sprite list!
  responses:
  - ok I think I got it [exercise]
  - (*) only 8 sprites per scanline? [only8]

only8:
  messages:
  - yeah
  - but games do some tricks to work around this limit
  - for example, they make them flicker to give the illusion of more sprites being on the same line
  responses:
  - ...how

exercise:
  messages:
  - |-
    📚  cool, implement the following method in 🛸  `SpriteRenderer`:
    **_evaluate()**:
      **->** defines a `sprites` array
      **->** for each possible sprite id (~0-63~):
        **->** creates a `sprite` using ```javascript this._createSprite(...)```
        **->** if the `sprite` should render in the current scanline, and `sprites` has less than 9 items:
          **->** if `sprites` has less than 8 items:
            **->** pushes `sprite` to the `sprites` array
          **->** else:
            **->** sets ```javascript this.ppu.registers.ppuStatus.spriteOverflow = 1```
            **->** stops looping
      **->** returns `sprites` in reversed order
  - 📚  also, you need to reset `spriteOverflow` to 0 on ~scanline=-1; cycle=1~, like you previously did with `isInVBlankInterval`
  - do it in `PPU::_onPreLine()`
  responses:
  - (*) how do I know if a sprite should be rendered? [visible]

visible:
  messages:
  - there's a method to check this in my Sprite library
  - use ```javascript sprite.shouldRenderInScanline(this.ppu.scanline)```
  responses:
  - ...exercise
