---
main:
  messages:
  - you might wonder why we named the `CPUMemory` class that way
  - and not just `Memory` 🤷
  - it's because there are 2 different memory buses 🚌
  responses:
  - how so? [howso]

howso:
  messages: 
  - the PPU has its own separate 16 KiB address space, specifically designed to fetch the 🕊️  tiles, 🏞️  backgrounds, and 🎨  palettes
  - check out 📄  ~/docs/ppu/ppu_memory.en.md~
  - most of the time, it will use PPU addresses
  - and it will only use the CPU addresses as a bridge to communicate with the CPU
  - from now on, we'll say something like `PPU address $1F2A` or `CPU address $1F2A` to differentiate the two spaces
  responses:
  - how can we emulate this? 😮 [emulate]

emulate:
  messages:
  - 📚  _-_create a `PPUMemory` class, using _--_📄 _-_ ~/tmpl/ppu/PPUMemory.js~ as template_--_
  - 📚  _-_implement just the first range ($0000-$1FFF), for both `read(...)` and `write(...)` operations_--_
  - _-_on <reads>, you should return ~this.mapper.ppuRead(address)~_--_
  - _-_on <writes>, you should call ~this.mapper.ppuWrite(address, value)~ and return_--_
  - |-
    📚  _-_then, add this to your PPU's constructor:
      ```javascript
      this.memory = new PPUMemory();```_--_
  - _-_remember to import the file!_--_
  responses: []
