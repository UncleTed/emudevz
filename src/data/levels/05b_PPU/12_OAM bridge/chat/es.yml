main:
  messages:
  - los juegos también definen, en tiempo de ejecución, cómo deben lucir los sprites 🛸
  - lo hacen escribiendo una tabla llamada <OAM> ("Object Attribute Memory")
  - esta tabla se encuentra en una región de memoria <interna> llamada 🐏  OAM RAM
  responses:
  - ¿cómo puede un juego escribir en 🐏  OAM RAM? [how]

how:
  messages:
  - "hay dos maneras:"
  - "1) usando los registros 🏠  ~OAMAddr~ y 📝  ~OAMData~"
  - "2) usando ⚡  ~OAMDMA~"
  responses:
  - cuéntame sobre 🏠  OAMAddr y 📝  OAMData [addrdata]
  - cuéntame sobre ⚡  OAMDMA [dma]
  - implementemos ese puente [implement]

addrdata:
  messages:
  - no hay mucho que decir sobre ellos
  - es lo mismo que 📍  ~PPUAddr~ y 📦  ~PPUData~
  - pero acceden a 🐏  OAM RAM en lugar de la memoria PPU
  responses:
  - ...how

dma:
  messages:
  - DMA ("Direct Memory Access") es un mecanismo de hardware para copiar bytes de una región de memoria a otra muy rápidamente
  - en el NEEES, esto se proporciona mediante el registro ⚡  ~OAMDMA~, que permite a los juegos llenar 🐏  OAM RAM copiando bytes de la memoria de la CPU
  - escribir ```raw $```~XX~ en ese registro copiará 256 bytes de las direcciones CPU ```raw $```~XX~```raw 00```-```raw $```~XX~```raw FF``` a la OAM RAM interna
  - esta operación tomará alrededor de 513 ciclos de CPU, durante los cuales la CPU está suspendida
  responses:
  - ...how

implement:
  messages:
  - 📚  _-_como hiciste con `PPUMemory::vram`, agrega una propiedad llamada `oamRam` en `PPUMemory`_--_
  - _-_el array debe almacenar 256 bytes_--_
  - _-_esta vez, no tienes que mapearla, la OAM es muy <interna>_--_
  - |-
    📚  _-_implementa estos métodos en `OAMData`:_--_
    *_-_*onRead()**:_--_
      *_-_*->** guarda la dirección OAM actual:_--_
        _-_```javascript const oamAddress = this.ppu.registers.oamAddr.value;```_--_
        _-_(el campo `value` está definido en `InMemoryRegister` y representa el valor actual)_--_
      *_-_*->** devuelve el byte correspondiente de OAM RAM, usando ~oamAddress~_--_
    *_-_*onWrite(value)**:_--_
      *_-_*->** guarda la dirección OAM actual (~oamAddress~)_--_
      *_-_*->** escribe ~value~ en el byte correspondiente de OAM RAM, usando ~oamAddress~_--_
      *_-_*->** incrementa la dirección OAM:_--_
        _-_```javascript this.ppu.registers.oamAddr.setValue(oamAddress + 1);```_--_
  - |-
    📚  _-_implementa este método en `OAMDMA`:_--_
    *_-_*onWrite(value)**:_--_
      *_-_*->** ~for i = 0; i < 256; i++~:_--_
        *_-_*->** construye la dirección (byte alto: ~value~, byte bajo: ~i~)_--_
        *_-_*->** lee la dirección de la memoria de la CPU (~this.ppu.cpu~ devuelve la CPU)_--_
        *_-_*->** asigna el byte obtenido a ~oamRam[i]~_--_
      *_-_*->** suma 513 a ~this.ppu.cpu.extraCycles~_--_
  responses: []
