main:
  messages:
  - games also define, at runtime, how the sprites should look 🛸
  - they do so by writing a table called <OAM> ("Object Attribute Memory")
  - this table lives in an <internal> memory region called 🐏  OAM RAM
  responses:
  - how can a game write to 🐏  OAM RAM? [how]

how:
  messages:
  - "there are two ways:"
  - "1) using the registers 🏠  ~OAMAddr~ and 📝  ~OAMData~"
  - "2) using ⚡  ~OAMDMA~"
  responses:
  - tell me about 🏠  OAMAddr and 📝  OAMData [addrdata]
  - tell me about ⚡  OAMDMA [dma]
  - let's implement that bridge [implement]

addrdata:
  messages:
  - there's not much to say about them
  - it's the same as 📍  ~PPUAddr~ and 📦  ~PPUData~
  - but they access 🐏  OAM RAM instead of PPU memory
  responses:
  - ...how

dma:
  messages:
  - DMA ("Direct Memory Access") is a hardware mechanism to copy bytes from one memory region to another one really fast
  - in the NEEES, this is provided by the ⚡  ~OAMDMA~ register, which let games fill 🐏  OAM RAM by copying bytes from CPU memory
  - writing ```raw $```~XX~ to that register will copy 256 bytes from CPU addresses ```raw $```~XX~```raw 00```-```raw $```~XX~```raw FF``` to the internal OAM RAM
  - this operation will take around 513 CPU cycles, during which the CPU is suspended
  responses:
  - ...how

implement:
  messages:
  - 📚  _-_like you did with `PPUMemory::vram`, add a property called `oamRam` in `PPUMemory`_--_
  - _-_the array should store 256 bytes_--_
  - _-_this time, you don't have to map it, OAM is very <internal>_--_
  - |-
    📚  _-_implement these methods in `OAMData`:_--_
    *_-_*onRead()**:_--_
      *_-_*->** saves the current OAM address:_--_
        _-_```javascript const oamAddress = this.ppu.registers.oamAddr.value;```_--_
        _-_(the `value` field is defined in `InMemoryRegister` and represents the current value)_--_
      *_-_*->** returns the corresponding byte from OAM RAM, using ~oamAddress~_--_
    *_-_*onWrite(value)**:_--_
      *_-_*->** saves the current OAM address (~oamAddress~)_--_
      *_-_*->** writes ~value~ to the corresponding byte from OAM RAM, using ~oamAddress~_--_
      *_-_*->** increments the OAM address:_--_
        _-_```javascript this.ppu.registers.oamAddr.setValue(oamAddress + 1);```_--_
  - |-
    📚  _-_implement this method in `OAMDMA`:_--_
    *_-_*onWrite(value)**:_--_
      *_-_*->** ~for i = 0; i < 256; i++~:_--_
        *_-_*->** builds the address (high byte: ~value~, low byte: ~i~)_--_
        *_-_*->** reads the address from CPU memory (~this.ppu.cpu~ returns the CPU)_--_
        *_-_*->** assigns the obtained byte to ~oamRam[i]~_--_
      *_-_*->** adds 513 to ~this.ppu.cpu.extraCycles~_--_
  responses: []
