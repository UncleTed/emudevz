---
main:
  messages:
  - the 🧠  CPU and 🔊  APU talk with each other via a set of 21 memory-mapped registers
  - they live at CPU addresses $4000-$4013, $4015 and $4017
  - check out 📄  ~/docs/apu/audio_registers.en.md~
  responses:
  - give me an example 🙏 [example]

example:
  messages:
  - let's say a game needs to configure the Pulse Channel 1 to a ~50%~ duty cycle and a constant volume of 6
  - this is handled by the bits of $4000 (🟦  Pulse1Control)
  - in the ~Bits~ column, ~DD~ is the duty cycle, ~C~ the constant-volume flag, and ~NNNN~ the volume
  - so, in this case, the game writes a 150 (binary ~10010110~) to $4000
  - and then the 🔊  APU uses that value to alter the pulse wave
  - the write to $4000 affects 4 parameters at the same time (~DD~, ~L~, ~C~, y ~NNNN~)
  - <{Pulse1Control.png}>
  responses:
  - so, these registers only hold numbers? 🔢 [numbers]

numbers:
  messages: 
  - yes, but some produce <special effects> when the 🧠  CPU writes to them
  - these side effects can reset note durations, start frequency sweeps, or even mute entire channels!
  - "I've coded a class that will help you implement this, you should use it 📖"
  responses:
  - how can I use it? [exercise]

exercise:
  messages:
  - read the docs at 📄  ~/docs/lib/InMemoryRegister.en.md~
  - and use 📄  ~/tmpl/apu/AudioRegisters.js~ as a template for the audio registers file
  - registers 🟦  `PulseControl` and 🎛️  `APUControl` are already implemented
  - note how they call `addField(...)` for each bit defined in the ~Bits~ column
  - "this creates <automatic properties>: after a write, the APU can access their values (e.g. ```javascript pulse1Control.dutyCycleId```)"
  - 📚  create an `AudioRegisters` class, using that template
  - |-
    📚  add a `registers` property to 🔊  `APU`, assigned to:
         ```javascript new AudioRegisters(this)```
  - "📚  lastly, map them in 🐏  `CPUMemory` (regions $4000-$4013, $4015 and $4017):"
  - <reads> should return ```javascript this.apu.registers.read(address)```
  - <writes> should call ```javascript this.apu.registers.write(address, value)``` and return
  - be careful with 🧮  APUFrameCounter, as it shares its address with the second 🎮  controller port; do not map <reads>! only writes!
  responses: []
