---
main:
  messages:
  - the APU has an <internal unit> called the ðŸ”€  Frame Sequencer
  - which <counts cycles> ðŸš²  following a four-step or five-step predetermined sequence
  - and triggers <clock events> where the channels can <react>
  - (the word frame is a bit misleading here, this has nothing to do with the video signal!)
  responses:
  - what's the sequence? [sequence]

sequence:
  messages:
  - actually, we only care about the quarter and <half> events of the sequence!
  - the sequence starts at 0
  - in the four-step sequence, quarter frames occur in cycles 3729, 7457, 11186, 14916
  - in the five-step sequence, quarter frames occur in cycles 3729, 7457, 11186, 18641
  - half frames occur in the <second> and <fourth> quarter of each sequence
  - and when the counter reaches the fourth quarter, it resets to 0
  - <{sequencer.png}>
  - games need to react to these events for several things, for example, silencing the channels when the notes end!
  responses:
  - let's count cycles ðŸš² [exercise]

exercise:
  messages:
  - |-
    ðŸ“š  implement in ðŸ§®  `APUFrameCounter`:
    **onLoad()**:
      **->** uses ```javascript this.addField(...)``` to define a `use5StepSequencer` field mapped to bit 7
    **onWrite(value)**:
      **->** sets the value with ```javascript this.setValue(...)```
      **->** calls ```javascript this.apu.frameSequencer.reset()```
      **->** calls ```javascript this.apu.onQuarterFrameClock()```
      **->** calls ```javascript this.apu.onHalfFrameClock()```
  - |-
    ðŸ“š  create a ðŸ”€  `FrameSequencer` class with the following:
    **constructor(apu)**:
      **->** saves the parameter as a property (```javascript this.apu```)
      **->** calls ```javascript this.reset()```
    **reset()**:
      **->** sets ```javascript this.counter``` to zero
        (that's the cycle counter!)
    **step()**:
      **->** increments ```javascript this.counter```
      **->** figures out whether we're in a five-step sequence or not by looking at the field we added
      **->** if we are in a quarter frame, calls ```javascript this.apu.onQuarterFrameClock()```
      **->** if we are in a half frame, calls ```javascript this.apu.onHalfFrameClock()```
      **->** if we are in the last cycle of the sequence, calls ```javascript this.reset()```
  - |-
    ðŸ“š  in ðŸ”Š  `APU`:
    **->** add a `frameSequencer` property with a new instance
    **->** add the `onQuarterFrameClock()` and `onHalfFrameClock()` methods, for now, empty
    **->** call ```javascript this.frameSequencer.step()``` after incrementing the sample counter
  responses: []
